CodeMirror.defineSimpleMode("kukulu", {
  start: [ { token: 'comment', regex: /[ \t]*#.*/ },
  { token: 'atom', regex: /Q[1-9][0-9]*/ },
  { token: 'atom', regex: /P[1-9][0-9]*/ },
  { token: 'atom', regex: /L[1-9][0-9]*-S[1-9][0-9]*/ },
  { token: 'atom', regex: /L[1-9][0-9]*-F[1-9][0-9]*/ },
  { token: 'atom', regex: /L[1-9][0-9]*/ },
  { token: 'atom', regex: /U[1-9][0-9]*/ },
  { token: 'atom', regex: /S[1-9][0-9]*/ },
  { token: 'keyword',
    regex: /Item|Property|Lexeme|Sense|Form|String|Text|Math|Time|Id|Url|Quantity|Coordinate|Shape|Media|Tabular|Bool|Set|Range|DataType|Entity/ },
  { token: 'string',
    regex: /"(:?[^\\"'\n\r]+|\\(:?[bfnrtv"\\/]|u[0-9a-fA-F]{4}))*"/ },
  { token: 'string-2',
    regex: /'(:?[^\\"'\n\r]+|\\(:?[bfnrtv"\\/]|u[0-9a-fA-F]{4}))*'/ },
  { token: 'link',
    regex: /[a-z]+:\/\/[^\s\t<>"{}|^`\\]+|<[a-z]+:\/\/[^\s\t<>"{}|^`\\]+>/ },
  { token: 'meta', regex: /@[a-zA-Z]+(-[a-zA-Z0-9]+)*-/ },
  { token: 'meta', regex: /@[a-zA-Z]+(-[a-zA-Z0-9]+)*/ },
  { token: 'variable-2',
    regex: /\?[?+*]?([a-zA-Z_][a-zA-Z0-9_-]*)?/ },
  { token: 'type',
    regex: /[+-]?([0-9]*[.])?[0-9]+([eE][+-]?[0-9]+)?(~|!|((Â±|[+]-|[+]\/-)[+-]?([0-9]*[.])?[0-9]+([eE][+-]?[0-9]+)?)|[[][+-]?([0-9]*[.])?[0-9]+([eE][+-]?[0-9]+)?,[+-]?([0-9]*[.])?[0-9]+([eE][+-]?[0-9]+)?\])?/ },
  { token: 'keyword', regex: /True/ },
  { token: 'keyword', regex: /False/ },
  { token: 'keyword', regex: /novalue/ },
  { token: 'keyword', regex: /somevalue/ },
  { token: 'keyword', regex: /Empty/ },
  { token: 'tag', regex: /[a-z][A-Za-z]*/ },
  { token: 'operator', regex: /[~*^]/ },
  { token: 'operator', regex: /=~/ },
  { token: 'operator', regex: /!~/ },
  { token: 'operator', regex: /=>/ },
  { token: 'operator', regex: /<=>/ },
  { token: 'operator', regex: /===/ },
  { token: 'operator', regex: /!==/ },
  { token: 'operator', regex: /==/ },
  { token: 'operator', regex: /!=/ },
  { token: 'operator', regex: /!/ },
  { token: 'operator', regex: />=/ },
  { token: 'operator', regex: />/ },
  { token: 'operator', regex: /<=/ },
  { token: 'operator', regex: /</ },
  { token: 'operator', regex: /:=/ },
  { token: 'operator', regex: /\.\.\./ },
  { token: 'operator', regex: /\./ },
  { token: 'operator', regex: /\|/ },
  { token: 'operator', regex: /&/ },
  { token: 'operator', regex: /:/ },
  { token: 'operator', regex: /,/ },
  { token: 'string', regex: /[a-zA-Z].*/ } ]
})